name: Deploy Backend

on:
  push:
    branches:
      - main
    paths: # Only run if files in these paths change
      - 'apps/backend/**' # Corrected path, assuming 'apps' is at the project root
      - 'packages/**'     # Trigger if shared packages change
      - '.github/workflows/deploy-212manager.yml'
  workflow_dispatch: # Allows manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Or your preferred Node.js version
          cache: 'yarn' # Cache yarn dependencies

      - name: Install Root Dependencies
        run: yarn install --frozen-lockfile

      - name: Build All Workspaces (inc. dependencies like @mercurjs/http-client)
        run: yarn build # This should run "turbo run build" from the root package.json

      # The `yarn build` at the root (turbo run build) should ideally handle
      # building the Medusa backend as well if apps/backend/package.json has a "build" script.
      # If `turbo run build` doesn't fully build the Medusa admin, explicitly build it:
      - name: Build Medusa Backend (Server & Admin) # Includes Medusa admin
        run: cd apps/backend && yarn build

      - name: Prepare Artifacts for Deployment
        run: |
          echo "Creating a self-contained deployment package..."
          mkdir -p artifact
          # Copy all necessary source files, package definitions, and the built code.
          # This makes the artifact self-sufficient for running migrations on the server.
          cp -R apps artifact/
          cp -R packages artifact/
          cp package.json artifact/
          cp yarn.lock artifact/
          
          echo "Artifacts prepared in artifact/:"
          ls -R artifact

      - name: Deploy Artifacts to EC2
        uses: appleboy/scp-action@v0.1.7 # Use a specific version
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }} # Consistent secret name for SSH private key
          source: "artifact/" # Copies the artifact directory
          target: "/var/www/212manager-app/deploy_temp"
          rm: true # Remove the artifact directory on the server after copying

      - name: Execute Deployment Script on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }} # Corrected secret name
          script: |
            set -e # Exit on error
            echo "Deploying backend to /var/www/212manager-app/212manager..."
            APP_DIR="/var/www/212manager-app/212manager"
            DEPLOY_SOURCE_DIR="/var/www/212manager-app/deploy_temp/artifact"
            
            # Use rsync to efficiently update the application directory.
            # This is like a smart 'cp' that only changes what's necessary.
            echo "Syncing new version to the application directory..."
            rsync -a --delete $DEPLOY_SOURCE_DIR/ $APP_DIR/
            
            # The application is now fully updated with source and built code.
            # Now, run the necessary server-side commands.
            cd $APP_DIR
            
            echo "Installing dependencies..."
            yarn install --frozen-lockfile
            
            echo "Running database migrations..."
            cd $APP_DIR/apps/backend
            echo "${{ secrets.BACKEND_ENV_PROD }}" > .env
            yarn db:migrate
            
            echo "Running post-migration scripts (codegen, etc.)..."
            cd $APP_DIR
            yarn codegen
            yarn generate:oas
            
            echo "Restarting PM2 process for mercur-api..."
            pm2 restart mercur-api || pm2 start $APP_DIR/apps/backend/dist/main.js --name mercur-api # Start if not already running
            pm2 save
            
            echo "Backend deployment complete."
            pm2 list

            echo "Cleaning up temporary deployment directory on EC2..."
            rm -rf /var/www/212manager-app/deploy_temp
